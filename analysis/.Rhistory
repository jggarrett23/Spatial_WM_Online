lat_plot,width = 5,height = 4.5, units = 'in')
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.7, units = 'in')
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.4, units = 'in')
lat_plot <- ggplot(data = summaryLat.df, aes(x=Period, y=Lat, fill = Cond)) +
geom_hline(yintercept = 0, linetype = 'solid', color = 'darkgray', size=.7) +
geom_col(position= 'dodge2', show.legend = T) +
geom_linerange(aes(ymin = Lat-Se,
ymax = Lat+Se), size = 1.2, position=position_dodge(.25)) +
scale_fill_manual(values=c("green", "blue"), name = '') +
labs(x=NULL, y="Alpha Lateralization Index") +
#ylim(c(-.27,.21)) +
theme(plot.title = element_text(hjust = 0.5, size = 23),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = 'white', fill = 'white'),
axis.line = element_line(colour = 'black', size = .9),
axis.ticks = element_line(colour = 'black', size = .8),
axis.text = element_text(size = 18, colour = 'black', face = 'bold'),
axis.title = element_text(size = 20, face = 'bold'),
legend.position = c(.9,.9)) +
geom_beeswarm(data=allLat.df, aes(x=Period, y=Lat, fill = Cond), cex = 2.3, size = .7,
dodge.width = .9,show.legend=F)
lat_plot
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.4, units = 'in')
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.4, units = 'in', dpi = 600)
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.4, units = 'in', dpi = 1000)
lat_plot <- ggplot(data = summaryLat.df, aes(x=Period, y=Lat, fill = Cond)) +
geom_hline(yintercept = 0, linetype = 'solid', color = 'darkgray', size=.7) +
geom_col(position= 'dodge2', show.legend = T) +
geom_linerange(aes(ymin = Lat-Se,
ymax = Lat+Se), size = 1.2, position=position_dodge(.25)) +
scale_fill_manual(values=c("green", "blue"), name = '') +
labs(x=NULL, y="Alpha Lateralization Index") +
ylim(c(-.05,.2)) +
theme(plot.title = element_text(hjust = 0.5, size = 23),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = 'white', fill = 'white'),
axis.line = element_line(colour = 'black', size = .9),
axis.ticks = element_line(colour = 'black', size = .8),
axis.text = element_text(size = 18, colour = 'black', face = 'bold'),
axis.title = element_text(size = 20, face = 'bold'),
legend.position = c(.9,.9)) +
geom_beeswarm(data=allLat.df, aes(x=Period, y=Lat, fill = Cond), cex = 2.3, size = .7,
dodge.width = .9,show.legend=F)
lat_plot
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/Alpha_Lateralization.jpg',
lat_plot,width = 5,height = 4.4, units = 'in')
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/WTF")
library(psycho)
library(haven)
library(labelled)
library(psych)
library(car)
library(tidyverse)
library(afex)
library(ggpubr)
library(ggbeeswarm)
library(cowplot)
library(grid)
library(rhdf5)
library(pracma)
library(scales)
library(BayesFactor)
library(matlab)
library(R.matlab)
library(reshape2)
#system('/Users/owner/Desktop/WTF/WTF_File_transfer.command')
beh_dat <- read.csv('/Users/owner/Desktop/WTF/Beh_data_changeDect.csv')
#rest
rest_indices <- psycho::dprime(beh_dat$Rest_hits, beh_dat$Rest_fA, beh_dat$Rest_misses, beh_dat$Rest_cRs)
beh_dat <- cbind(beh_dat, rest_indices)
colnames(beh_dat)[colnames(beh_dat)=="dprime"] <- "Rest_dprime"
colnames(beh_dat)[colnames(beh_dat)=="beta"] <- "Rest_beta"
colnames(beh_dat)[colnames(beh_dat)=="aprime"] <- "Rest_aprime"
colnames(beh_dat)[colnames(beh_dat)=="bppd"] <- "Rest_bppd"
colnames(beh_dat)[colnames(beh_dat)=="c"] <- "Rest_c"
#exercise
low_indices <- psycho::dprime(beh_dat$Low_hits, beh_dat$Low_fA, beh_dat$Low_misses, beh_dat$Low_cRs)
beh_dat <- cbind(beh_dat, low_indices)
colnames(beh_dat)[colnames(beh_dat)=="dprime"] <- "Low_dprime"
colnames(beh_dat)[colnames(beh_dat)=="beta"] <- "Low_beta"
colnames(beh_dat)[colnames(beh_dat)=="aprime"] <- "Low_aprime"
colnames(beh_dat)[colnames(beh_dat)=="bppd"] <- "Low_bppd"
colnames(beh_dat)[colnames(beh_dat)=="c"] <- "Low_c"
fin_beh <- data.frame('Hits' = c(beh_dat$Rest_hits, beh_dat$Low_hits),
'False_Alarms'=c(beh_dat$Rest_fA, beh_dat$Low_fA),
'Misses' = c(beh_dat$Rest_misses, beh_dat$Low_misses),
'cRs' = c(beh_dat$Rest_cRs, beh_dat$Low_cRs),
'dPrime' = c(beh_dat$Rest_dprime, beh_dat$Low_dprime),
'c' = c(beh_dat$Rest_c, beh_dat$Low_c),
'beta' = c(beh_dat$Rest_beta, beh_dat$Low_beta),
'aprime' = c(beh_dat$Rest_aprime, beh_dat$Low_aprime),
'bppd' = c(beh_dat$Rest_bppd, beh_dat$Low_bppd),
'TF'=c(beh_dat$Mean_Rest_TF, beh_dat$Mean_Low_TF),
'TF_acc'=c(beh_dat$Mean_Rest_TF_Acc, beh_dat$Mean_Low_TF_Acc),
'condition'=c(rep(0,nrow(beh_dat)),rep(1,nrow(beh_dat))))
fin_beh$condition <- factor(fin_beh$condition, labels=c("Rest", "Exercise"))
se <- function(x) { sd(na.omit(x))/sqrt(length(na.omit(x))) }
rest_rpe <- c(6.875,7.25,6,6.875,6,7.625,6.875,6.375,6,6,7.25,6.625,
6,6,6,6,6.75,7.375,6.125,6,6.625,6,6.875,6.875,6.75,6,8.875,
7.125,6,7.375,6,6.125,6.625,6.875)
low_rpe <- c(9.5,8.875,12.875,10.83333333,7.5,11.25,8,8.625,7.25,8.5,
9,8.375,7.625,7.375,10.75,7.25,9.75,9.125,8.25,8.875,7.375,
10.125,9,9.625,7,7.625,10.5,7.375,7.125,7.875,6.875,7.5,7.375,9.125)
fin_beh$RPE <- c(rest_rpe,low_rpe)
rest_hr <- c(83,78,139,87,82,59,60,80,90,82,91,70,80,83,82,61,84,79,56,83,74,
80,71,89,59,51,61,79,90,93,67,85,84,75)
low_hr <- c(102,103,161.5,128,101,85,91,97,128,104,124,86,113,110,116,86,110,107,80,123,107,
112,89,114,84,75,89,123,121,122,85,106,110,104)
fin_beh$HR <- c(rest_hr,low_hr)
summary_stats <- group_by(fin_beh, condition) %>%
summarise(mean_hits = mean(Hits),
se_hits = se(Hits),
mean_fA = mean(False_Alarms),
se_fA = se(False_Alarms),
mean_tf = mean(TF),
se_tf=se(TF),
mean_tf_ac = mean(TF_acc),
se_tf_ac = se(TF_acc),
mean_dprime = mean(dPrime),
se_dprime = se(dPrime),
mean_c = mean(c),
se_c = se(c),
mean_rpe = mean(RPE),
se_rpe = se(RPE),
mean_hr = mean(HR),
se_hr = se(HR))
#test HOV (p > 0.05 is good)
leveneTest(Hits ~ condition, fin_beh)
leveneTest(False_Alarms ~ condition, fin_beh)
leveneTest(dPrime ~ condition, fin_beh)
leveneTest(c ~ condition, fin_beh)
#test to see if performance enhanced by exercise w/ one way ttest (do less b/c tests Rest > Low)
t.test(dPrime ~ condition, data = fin_beh, paired = T, alternative ='l')
t.test(c ~ condition, data = fin_beh, paired = T, alternative='l')
t.test(TF ~ condition, data = fin_beh, paired = T, alternative = 'l')
t.test(TF_acc ~ condition, data = fin_beh, paired = T, alternative = 'l')
sourceDir <- "/Users/owner/Desktop/WTF/Matlab_Data"
rest_total_alpha.file <- "exerCon01_changeDect_Single_freq_slopes_total_ALPHA_accTrials.mat"
low_total_alpha.file <- "exerCon02_changeDect_Single_freq_slopes_total_ALPHA_accTrials.mat"
real_rest.alpha <- as.data.frame(h5read(paste(sourceDir,rest_total_alpha.file,sep = "/"),'allTF_real_total'))
perm_rest.alpha <- as.data.frame(h5read(paste(sourceDir,rest_total_alpha.file,sep = "/"),'allTF_perm_total'))
real_low.alpha <- as.data.frame(h5read(paste(sourceDir,low_total_alpha.file,sep = "/"),'allTF_real_total'))
perm_low.alpha <- as.data.frame(h5read(paste(sourceDir,low_total_alpha.file,sep = "/"),'allTF_perm_total'))
rest_total_theta.file <- "exerCon01_changeDect_Single_freq_slopes_total_THETA_accTrials.mat"
low_total_theta.file <- "exerCon02_changeDect_Single_freq_slopes_total_THETA_accTrials.mat"
real_rest.theta <- as.data.frame(h5read(paste(sourceDir,rest_total_theta.file,sep = "/"),'allTF_real_total'))
perm_rest.theta <- as.data.frame(h5read(paste(sourceDir,rest_total_theta.file,sep = "/"),'allTF_perm_total'))
real_low.theta <- as.data.frame(h5read(paste(sourceDir,low_total_theta.file,sep = "/"),'allTF_real_total'))
perm_low.theta <- as.data.frame(h5read(paste(sourceDir,low_total_theta.file,sep = "/"),'allTF_perm_total'))
post_ex <-  c(3,5,6,7,8,11,12,13,16,17,23,25,29,33,34,35) # condition order exercise,rest
post_rest <- c(1,2,4,10,14,15,19,20,21,22,24,26,27,28,30,31,32) #condition order rest,exercise
post_ex.indx <- c()
post_rest.indx <- c()
for (w in 1:nrow(beh_dat)) {
if (any(beh_dat$SjNum[w] == post_ex)) {
post_ex.indx <- append(post_ex.indx,w)
}
if(any(beh_dat$SjNum[w] == post_rest)) {
post_rest.indx <- append(post_rest.indx,w)
}
}
post_ex.rest_d <- beh_dat[post_ex.indx,"Rest_dprime"]
post_ex.low_d <- beh_dat[post_ex.indx,"Low_dprime"]
post_rest.rest_d <- beh_dat[post_rest.indx,"Rest_dprime"]
post_rest.low_d <- beh_dat[post_rest.indx,"Low_dprime"]
post_effect.df <- data.frame("Rest_dprime"=c(post_rest.rest_d,post_ex.rest_d),
"Low_dprime" = c(post_rest.low_d,post_ex.low_d),
"Group" = c(rep(0,length(post_rest)), rep(1,length(post_ex))))
post_effect.df$Group <- factor(post_effect.df$Group, labels = c("Post-Rest","Post-Ex"))
post_effect.summary <- group_by(post_effect.df, Group) %>%
summarise(mean_Rest.d = mean(Rest_dprime),
mean_Low.d = mean(Low_dprime),
se_Rest.d = se(Rest_dprime),
se_Low.d = se(Low_dprime))
# run BF paired ttest to compare dprime beteewn Post exercise effects
post.rest_effects.d_BF <- ttestBF(post_rest.rest_d,post_ex.rest_d, paired = F)
extractBF(post.rest_effects.d_BF)$bf
post.ex_effects.d_BF <- ttestBF(post_rest.low_d,post_ex.low_d, paired = F)
extractBF(post.ex_effects.d_BF)$bf
post.ex_rest.plot <- ggplot(post_effect.summary, aes(x = Group, y = mean_Rest.d, fill=Group)) +
geom_col() + geom_errorbar(aes(ymin = mean_Rest.d-se_Rest.d, ymax = mean_Rest.d+se_Rest.d), width = .2) +
labs(x=NULL, y="d'", title="Post-Exercise Comparison of d'") +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Condition Order") +
scale_x_discrete(labels = c("Rest","Post-Exercise Rest")) +
geom_point(data=post_effect.df, aes(x=Group, y=Rest_dprime), show.legend=F)
post.rest_low.plot <- ggplot(post_effect.summary, aes(x = Group, y = mean_Low.d, fill=Group)) +
geom_col() + geom_errorbar(aes(ymin = mean_Low.d-se_Low.d, ymax = mean_Low.d+se_Low.d), width = .2) +
labs(x=NULL, y="d'", title="Post-Rest Comparison of d'") +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("cyan", "purple"), name="Condition Order") +
scale_x_discrete(labels = c("Post-Rest Exercise","Exercise")) +
geom_point(data=post_effect.df, aes(x=Group, y=Rest_dprime), show.legend=F)
post.ex_plots <- ggarrange(post.ex_rest.plot,post.rest_low.plot, common.legend = F, legend = "bottom")
post.ex_plots
#dimensions backward for some reason
rest.real <- colMeans(real_rest.alpha)
rest.perm <- colMeans(perm_rest.alpha)
low.real <- colMeans(real_low.alpha)
low.perm <- colMeans(perm_low.alpha)
rest_se <- apply(real_rest.alpha,2,se)
low_se <- apply(real_low.alpha,2,se)
slope_df <-  data.frame("Rest Real" = rest.real, "Rest Perm" = rest.perm, "Rest SE" = rest_se,
"Low Real" = low.real, "Low Perm" = low.perm, "Low SE" = low_se,
"Time"=floor(linspace(-500, 2000, 625)))
#preallocate arrays
bf_slope.summary <- array(dim = c(1,length(real_rest.alpha)))
sig_bf <- c()
h_test <- c()
sig_h <- c()
#run bayes paired-ttest and student's paired ttest on data. Former more conservative
for (i in 1:length(real_rest.alpha)) {
bf_slope <- ttestBF(real_rest.alpha[[i]],real_low.alpha[[i]], paired = T)
bf_slope.summary[i] <- extractBF(bf_slope)[,1]
if (bf_slope.summary[i] > 3) {
sig_bf <- append(sig_bf,i)
}
h_test[i] <- t.test(real_rest.alpha[i]-real_low.alpha[i])[3]
if (h_test[i] < 0.05) {
sig_h <- append(sig_h,i)
}
}
restvperm.summary <- array(dim = c(1,length(real_rest.alpha)))
#run bayes on rest real v perm
for (i in 1:length(real_rest.alpha)) {
restvperm.bf <- ttestBF(real_rest.alpha[[i]],perm_rest.alpha[[i]], paired = T)
restvperm.summary[i] <- extractBF(restvperm.bf)[,1]
}
lowvperm.summary <-  array(dim = c(1,length(real_low.alpha)))
for (i in 1:length(real_low.alpha)) {
lowvperm.bf <- ttestBF(real_low.alpha[[i]],perm_low.alpha[[i]], paired = T)
lowvperm.summary[i] <- extractBF(lowvperm.bf)[,1]
}
# save file in mat format (WORKS)
filename = "/Users/owner/Desktop/WTF/Matlab_Figures/RestvLow_ALPHA_BFSummary.mat"
writeMat(filename, restvlow_bf = bf_slope.summary, restvperm_bf = restvperm.summary,
lowvperm_bf = lowvperm.summary)
segmentedTF.alpha <- data.frame("Mean Encode"=c(mean(slope_df$Rest.Real[which(slope_df$Time==0):which(slope_df$Time==249)]),mean(slope_df$Low.Real[which(slope_df$Time==0):which(slope_df$Time==249)])),
"Mean Delay" = c(mean(slope_df$Rest.Real[which(slope_df$Time==249):which(slope_df$Time==2000)]),mean(slope_df$Low.Real[which(slope_df$Time==249):which(slope_df$Time==2000)])),
"Sig Delay"= c(mean(slope_df$Rest.Real[bf_slope.summary > 3]),mean(slope_df$Low.Real[bf_slope.summary > 3])),
"SE Encode" = c(se(slope_df$Rest.Real[which(slope_df$Time==0):which(slope_df$Time==249)]),se(slope_df$Low.Real[which(slope_df$Time==0):which(slope_df$Time==249)])),
"SE Delay" = c(se(slope_df$Rest.Real[which(slope_df$Time==249):which(slope_df$Time==2000)]),se(slope_df$Low.Real[which(slope_df$Time==249):which(slope_df$Time==2000)])),
"SE SigDelay"= c(se(slope_df$Rest.Real[bf_slope.summary > 3]),se(slope_df$Low.Real[bf_slope.summary > 3])),
"Condition"=c(1,2))
segmentedTF.alpha$Condition <- factor(segmentedTF.alpha$Condition, labels=c("Rest","Exercise"))
allSegmented.alpha <- data.frame("Encode"=c(rowMeans(real_rest.alpha[,which(slope_df$Time == 0):which(slope_df$Time == 249)]),rowMeans(real_low.alpha[,which(slope_df$Time == 0):which(slope_df$Time == 249)])),
"Delay"=c(rowMeans(real_rest.alpha[,which(slope_df$Time == 249):which(slope_df$Time == 2000)]),rowMeans(real_low.alpha[,which(slope_df$Time == 249):which(slope_df$Time == 2000)])),
"SigDelay"=c(rowMeans(real_rest.alpha[,bf_slope.summary>3]),rowMeans(real_low.alpha[,bf_slope.summary > 3])),
"Condition"=c(rep(1,nrow(real_rest.alpha)),rep(2,nrow(real_rest.alpha))),
"Pair"=c(rep(1:34,2)))
allSegmented.alpha$Condition <- factor(allSegmented.alpha$Condition,labels=c("Rest","Exercise"))
seg1 <- ggplot(segmentedTF.alpha, aes(x = Condition, y = Mean.Encode, fill= Condition)) +
geom_col() + geom_errorbar(aes(ymin = Mean.Encode-SE.Encode, ymax = Mean.Encode+SE.Encode), width = .2) +
labs(x=NULL, y="Chan. Resp. (a.u.)", title='Encoding Period\n Alpha TF\nMean Amplitude \n(0-250ms)') +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_point(data=allSegmented.alpha, aes(x=Condition, y=Encode), show.legend=F) +
geom_line(data=allSegmented.alpha, aes(x=Condition, y=Encode, group = Pair), lty=1, alpha=0.25)
seg2 <- ggplot(segmentedTF.alpha, aes(x = Condition, y = Mean.Delay, fill= Condition)) +
geom_col() + geom_errorbar(aes(ymin = Mean.Delay-SE.Delay, ymax = Mean.Delay+SE.Delay), width = .2) +
labs(x=NULL, y="Chan. Resp. (a.u.)", title='Delay Period\n Alpha TF\nMean Amplitude \n(250-2000ms)') +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_point(data=allSegmented.alpha, aes(x=Condition, y=Delay), show.legend=F) +
geom_line(data=allSegmented.alpha, aes(x=Condition, y=Delay, group = Pair), lty=1, alpha=0.25)
seg3 <- ggplot(segmentedTF.alpha, aes(x = Condition, y = Sig.Delay, fill= Condition)) +
geom_col() + geom_errorbar(aes(ymin = Sig.Delay-SE.SigDelay, ymax =Sig.Delay+SE.SigDelay), width = .2) +
labs(x=NULL, y="Chan. Resp. (a.u.)", title='Alpha TF Amplitude Across Sig. Different Period \n(882-1014ms)') +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_point(data=allSegmented.alpha, aes(x=Condition, y=SigDelay), show.legend=F) +
geom_line(data=allSegmented.alpha, aes(x=Condition, y=SigDelay, group = Pair), lty=1, alpha=0.25)
ggarrange(seg1,seg2,seg3, common.legend = T, legend = "bottom")
library(lsr)
library(pwr)
# cohend = MDiff/Sd(MDiffs)
alpha.effect <- cohensD(allSegmented.alpha$SigDelay[which(allSegmented.alpha$Condition=='Rest')],
allSegmented.alpha$SigDelay[which(allSegmented.alpha$Condition=='Exercise')],
method='paired')
pwr.t.test(d=round(alpha.effect,2),sig.level=0.05,power=.8,type="paired")
#882-1014ms
#dimensions backward for some reason
rest.theta.real <- colMeans(real_rest.theta)
rest.theta.perm <- colMeans(perm_rest.theta)
low.theta.real <- colMeans(real_low.theta)
low.theta.perm <- colMeans(perm_low.theta)
rest_se <- apply(real_rest.theta,2,se)
low_se <- apply(real_low.theta,2,se)
theta.slope_df <-  data.frame("Rest Real" = rest.theta.real, "Rest Perm" = rest.theta.perm, "Rest SE" = rest_se,
"Low Real" = low.theta.real, "Low Perm" = low.theta.perm, "Low SE" = low_se,
"Time"=linspace(-500, 2000, 625))
#preallocate arrays
bf_slope.summary.theta <- array(dim = c(1,length(real_rest.theta)))
sig_bf <- c()
h_test <- c()
sig_h <- c()
#run bayes paired-ttest and student's paired ttest on data. Former more conservative
for (i in 1:length(real_rest.theta)) {
bf_slope <- ttestBF(real_rest.theta[[i]],real_low.theta[[i]], paired = T)
bf_slope.summary.theta[i] <- extractBF(bf_slope)[,1]
if (bf_slope.summary.theta[i] > 3) {
sig_bf <- append(sig_bf,i)
}
h_test[i] <- t.test(real_rest.theta[i]-real_low.theta[i])[3]
if (h_test[i] < 0.05) {
sig_h <- append(sig_h,i)
}
}
restvperm.summary.theta <- array(dim = c(1,length(real_rest.theta)))
#run bayes on rest real v perm
for (i in 1:length(real_rest.theta)) {
restvperm.bf <- ttestBF(real_rest.theta[[i]],perm_rest.theta[[i]], paired = T)
restvperm.summary.theta[i] <- extractBF(restvperm.bf)[,1]
}
lowvperm.summary.theta <-  array(dim = c(1,length(real_low.theta)))
for (i in 1:length(real_low.theta)) {
lowvperm.bf <- ttestBF(real_low.theta[[i]],perm_low.theta[[i]], paired = T)
lowvperm.summary.theta[i] <- extractBF(lowvperm.bf)[,1]
}
# save file in mat format (WORKS)
filename = "/Users/owner/Desktop/WTF/Matlab_Figures/RestvLow_THETA_BFSummary.mat"
writeMat(filename, restvlow_bf = bf_slope.summary.theta, restvperm_bf = restvperm.summary.theta,
lowvperm_bf = lowvperm.summary.theta)
alpha.theta.slope_rest <- array(dim = length(real_rest.alpha))
alpha.theta.slope_low <- array(dim = length(real_low.alpha))
sig.cor_rest <- c()
sig.cor_low <- c()
sig.a_t.bf <- c()
slope_restCIupper <- array(dim = length(real_rest.alpha))
slope_restCIlower <- array(dim = length(real_rest.alpha))
slope_lowCIupper <- array(dim = length(real_low.alpha))
slope_lowCIlower <- array(dim = length(real_low.alpha))
a.t_bfSummary <- array(dim = c(1,length(real_low.alpha)))
for (n in 1:length(real_rest.alpha)) {
a.t_rest <- cor.test(real_rest.alpha[[n]], real_rest.theta[[n]])
alpha.theta.slope_rest[n] <- c(a.t_rest$estimate)
slope_restCIlower[n] <- a.t_rest$conf.int[1]
slope_restCIupper[n] <- a.t_rest$conf.int[2]
if (a.t_rest$p.value < 0.05) {
sig.cor_rest <- append(sig.cor_rest,n)
}
a.t_low <- cor.test(real_low.alpha[[n]], real_low.theta[[n]])
alpha.theta.slope_low[n] <- a.t_low$estimate
slope_lowCIlower[n] <- a.t_low$conf.int[1]
slope_lowCIupper[n] <- a.t_low$conf.int[2]
if (a.t_low$p.value < 0.05) {
sig.cor_low <- append(sig.cor_low,n)
}
a.t_bf <- ttestBF(real_low.alpha[[n]], real_low.theta[[n]], paired =T)
a.t_bfSummary[n] <- extractBF(a.t_bf, onlybf=T)
}
a.t.corr.df <- data.frame("Cor" = c(alpha.theta.slope_rest, alpha.theta.slope_low),
"LowerCI" = c(slope_restCIlower,slope_lowCIlower),
"UpperCI"=c(slope_restCIupper,slope_lowCIupper),
"Time" = c(rep(slope_df$Time,2)),
"Condition" = c(rep(0,625),rep(1,625)))
a.t.corr.df$Condition <- factor(a.t.corr.df$Condition, labels = c("Rest","Low"))
ggplot() +
geom_line(data = a.t.corr.df, aes(x=Time, y=Cor, color = Condition),size=1) +
labs(y = "r", title = "Alpha vs Theta Total Power TF Slope Correlation") +
scale_color_manual(values = c("green","blue")) +
theme(panel.grid.minor = element_line(colour="grey", size=0.1)) +
scale_x_continuous(name="Time (ms)",breaks=seq(-500,2000,250)) +
scale_y_continuous(name='r', breaks=seq(-1,1,.2),limits = c(-1,1)) +
geom_segment(aes(x = slope_df$Time[sig.cor_low], xend = slope_df$Time[sig.cor_low], y = -0.78, yend = -0.93), color = 'yellow') +
geom_segment(aes(x = slope_df$Time[sig.cor_rest], xend = slope_df$Time[sig.cor_rest], y = -0.6, yend = -0.75), color = 'cyan')
cols <- c("Rest"="green","Low"="blue")
dtf_plot <- ggplot()+
#rest real slope & shaded error
geom_line(data = slope_df, aes(x=Time, y = slope_df$Rest.Real, colour="Rest"), color = 'green') +
geom_ribbon(aes(x = slope_df$Time,ymin=slope_df$Rest.Real-rest_se, ymax=slope_df$Rest.Real+rest_se), fill = 'green', alpha = 0.2) +
#exercise real slope & shaded error
geom_line(data= slope_df, aes(x=Time, y=slope_df$Low.Real, colour="Low"), color = 'blue') + geom_ribbon(aes(x= slope_df$Time, ymin=slope_df$Low.Real-low_se, ymax=slope_df$Low.Real+low_se), fill = 'blue', alpha = 0.2) +
#permuted slopes
geom_line(data = slope_df, aes(x=Time, y=slope_df$Rest.Perm), color = 'green', linetype = 'dashed') +
geom_line(data = slope_df, aes(x=Time, y=slope_df$Low.Perm), color = 'blue', linetype = 'dashed') +
#plot aestics control
theme(panel.grid.minor = element_line(colour="grey", size=0.1)) + labs(x = "Time", y = "Slope", title = "Rest vs. Exercise Slope Plots") + theme(plot.title = element_text(hjust = 0.5, size = 20, face = 'bold')) + scale_x_continuous(name="Time",breaks=c(-500,-250,0,250,500,750,1000,1250,1500,1750,2000)) +
scale_y_continuous(labels=scientific) + geom_vline(xintercept = c(0,250), linetype = 'dotted', color='black', size=1) +
geom_segment(aes(x = slope_df$Time[sig_bf], xend = slope_df$Time[sig_bf], y = -1.5e-03, yend = -2e-03),color = 'red')
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/RestvLow_BFSlope.png',plot=dtf_plot,
width=20, height=10)
p3 <- ggplot(summary_stats, aes(x = condition, y = mean_tf, fill=condition)) +
geom_col() + geom_errorbar(aes(ymin = mean_tf-se_tf, ymax = mean_tf+se_tf), width = .2) +
labs(x=NULL, y=expression(paste("Chan. Resp. (",mu,"V"^"2"*")")), title='Mean Amplitude Tuning Functions') +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_point(data=fin_beh, aes(x=condition, y=TF), show.legend=F)
ggsave(filename = '/Users/owner/Desktop/WTF/Figures_Images/Overall/avg_TF_bar.png',plot=p3)
#accurate trials only
p4 <- ggplot(summary_stats, aes(x = condition, y = mean_tf_ac, fill=condition)) +
geom_col() + geom_errorbar(aes(ymin = mean_tf_ac-se_tf_ac, ymax = mean_tf_ac+se_tf_ac), width = .2) +
labs(x=NULL, y=expression(paste("Chan. Resp. (",mu,"V"^"2"*")")), title='Mean Amplitude Tuning Functions \n(Accurate Trials)') +
theme(plot.title = element_text(hjust = 0.5), legend.position = "bottom") +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_point(data=fin_beh, aes(x=condition, y=TF), show.legend=F)
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/avg_TF_bar(acc).png',plot=p4)
p1 <- ggplot(summary_stats, aes(x = condition, y = mean_dprime, fill=condition)) +
geom_col() + geom_linerange(aes(ymin = mean_dprime-se_dprime, ymax = mean_dprime+se_dprime), size = .8, position=position_nudge(x = .2)) +
labs(x=NULL, y="d'") +
theme(plot.title = element_text(hjust = 0.5, size = 23),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = 'white', fill = 'white'),
axis.line = element_line(colour = 'black', size = .9),
axis.text = element_text(size = 16, colour = 'black', face = 'bold'),
axis.title = element_text(size = 18, colour = 'black',face = 'bold')) +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condtion") +
geom_beeswarm(data=fin_beh, aes(x=condition, y=dPrime), cex = 3, show.legend=F,
size = .7)
p2 <- ggplot(summary_stats, aes(x = condition, y = mean_c, fill=condition)) +
geom_col() + geom_linerange(aes(ymin = mean_c-se_c, ymax = mean_c+se_c),
size = .8,position=position_nudge(x = .2)) +
labs(x=NULL, y="c") +
theme(plot.title = element_text(hjust = 0.5, size = 23),
legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = 'white', fill = 'white'),
axis.line = element_line(colour = 'black', size = .9),
axis.text = element_text(size = 16, colour = 'black', face = 'bold'),
axis.title = element_text(size = 18, colour = 'black',face = 'bold')) +
scale_fill_manual(values=c("green", "blue"), name="Experimental Condition") +
geom_beeswarm(data=fin_beh, aes(x=condition, y=c), cex = 3,show.legend = F,
size = .7) +
geom_hline(yintercept = 0, linetype = 'dashed', color = 'darkgray')
p1_p2 <- ggarrange(p1,p2, common.legend = T, legend = 'none')
p1_p2
ggsave(filename='/Users/owner/Desktop/WTF/Figures_Images/Overall/dPrime_c.jpg',
width = 6, height = 3, units = 'in')
install.packages('rjson')
library(rjson)
result <- fromJSON(file = "/Users/owner/Downloads/jatos_results_20210107201920.json")
result <- fromJSON(file = "/Users/owner/Downloads/jatos_results_20210107201920")
result$SampleProbeAngles
diff <- abs(result$SampleProbeAngles - result$RespProbeAngles)
samp.probe_angles <- result$SampleProbeAngles
resp.probe_angles <- result$RespProbeAngles
do.call('cbind',samp.probe_angles)
foo <- do.call('cbind',samp.probe_angles)
View(foo)
View(foo)
foo <- do.call('rbind',samp.probe_angles)
View(foo)
array(unlist(samp.probe_angles), dim = c(1,22))
unlist(samp.probe_angles)
diff <- abs(unlist(samp.probe_angles) - unlist(resp.probe_angles))
diff
mean(diff)
unlist(samp.probe_angles)
unlist(resp.probe_angles)
diff
require('rjson')
if(require('rjson'))
)
if(require('rjson')) TRUE
if (!require('rjson')) install.packages('package')
library(rjson)
result <- fromJSON(file = "jatos_results_20210107211221")
samp.probe_angles <- result$SampleProbeAngles
resp.probe_angles <- result$RespProbeAngles
diff <- abs(unlist(samp.probe_angles) - unlist(resp.probe_angles))
pwd
setwd('/Users/owner/Desktop/jatos_mac_java/study_assets_root/Spatial_WM_Online_Task/analysis/')
result <- fromJSON(file = "jatos_results_20210107211221")
samp.probe_angles <- result$SampleProbeAngles
resp.probe_angles <- result$RespProbeAngles
rm(foo)
samp.probe_angles <- unlist(result$SampleProbeAngles)
resp.probe_angles <- unlist(result$RespProbeAngles)
diff <- abs(samp.probe_angles - resp.probe_angles)
mean(diff)
resp.probe_angles
result <- fromJSON(file = "jatos_results_220210107214156")
setwd('/Users/owner/Desktop/jatos_mac_java/study_assets_root/Spatial_WM_Online_Task/analysis/')
result <- fromJSON(file = "jatos_results_220210107214156")
result <- fromJSON(file = "jatos_results_20210107214156")
samp.probe_angles <- unlist(result$SampleProbeAngles)
resp.probe_angles <- unlist(result$RespProbeAngles)
diff <- abs(samp.probe_angles - resp.probe_angles)
diff
mean(diff)
if (!require('rjson')) install.packages('package')
library(rjson)
setwd('/Users/owner/Desktop/jatos_mac_java/study_assets_root/Spatial_WM_Online_Task/analysis/')
result <- fromJSON(file = "jatos_results_20210108003931")
samp.probe_angles <- unlist(result$SampleProbeAngles)
resp.probe_angles <- unlist(result$RespProbeAngles)
diff <- abs(samp.probe_angles - resp.probe_angles)
mean(diff)
error <- abs(samp.probe_angles - resp.probe_angles)
mean(error)
print(paste('Avg Degree Error: ',mean(error))
)
print(paste('Avg Degree Error: ',round(mean(error),2)))
print(paste('Avg Error: ',round(mean(error),2),' Degrees'))
print(paste('Avg Error: ',round(mean(error),2),'\u00B0C'))
print(paste('Avg Error: ',round(mean(error),2),'\u00B0'))
print(paste0('Avg Error: ',round(mean(error),2),'\u00B0'))
print(paste0('Avg Error: ',round(std(error),2),'\u00B0'))
print(paste0('Avg Error: ',round(stdv(error),2),'\u00B0'))
print(paste0('Stdv Error: ',round(sd(error),2),'\u00B0'))
print(paste0('Avg Error: ',round(mean(error),2),'\u00B0'))
print(paste0('Stdv Error: ',round(sd(error),2),'\u00B0'))
